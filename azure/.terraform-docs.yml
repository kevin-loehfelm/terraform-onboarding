formatter: "markdown table" # this is required

version: "0.18"

header-from: main.tf

footer-from: ""

recursive:
  enabled: false
  path: ""

sections:
  hide: []
  show: []

content: |-
  # Terraform Onboarding

  This repository contains the Terraform code for initial setup of the demo environment. 

  | Repository | Description |
  |------------|-------------|
  | [kevin-loehfelm/terraform-onboarding](https://github.com/kevin-loehfelm/terraform-onboarding) | Repository for Terraform-driven automated onboarding |
  | [kevin-loehfelm/terraform-onboarding-azure-native-project](https://github.com/kevin-loehfelm/terraform-onboarding-azure-native-project) | No-Code Module for deploying an Azure project with Azure Federated Identities |
  | [kevin-loehfelm/template-azure-native-project](https://github.com/kevin-loehfelm/template-azure-native-project) | Template repository for Project using Azure Federated Identities |
  | [kevin-loehfelm/terraform-onboarding-azure-vault-backed-static-project](https://github.com/kevin-loehfelm/terraform-onboarding-azure-vault-backed-static-project) | No-Code Module for deploying an Azure project with Vault-backed credentials using persistent Service Principals |
  | [kevin-loehfelm/terraform-onboarding-azure-vault-backed-dynamic-project](https://github.com/kevin-loehfelm/terraform-onboarding-azure-vault-backed-dynamic-project) | No-Code Module for deploying an Azure project with Vault-backed credentials using dynamic Service Principals |
  | [kevin-loehfelm/template-azure-vault-backed-project](https://github.com/kevin-loehfelm/template-azure-vault-backed-project) | Template repository for Project using Vault-backed Azure Credentials |

  ## Deployment

  1. Clone this repository
  2. Change to the working directory ```azure/```
  3. Configure the environment per prerequisites section
      1. [Configure Environment](#configure-environment)
      2. [Configure Terraform Variables](#configure-terraform-variables)
  4. Initialize Terraform configuration
      ```
      terraform init
      ```
  5. Validate environment. Resolve any errors.
      ```
      terraform validate
      ```
  6. Review Terraform plan and apply changes.
      ```
      terraform plan
      terraform apply
      ```

  ### Configure Environment

  Providers are configured to use environment context for authority to create resources.

  * **azuread**
      * Required Authorization:
          * Create Azure Entra ID Application
          * Create Azure Entra ID Service Principal
          * Assign Azure Entra ID Permissions
          * Grant Admin Consent for Administrative Permissions
      * Login with Azure CLI:
          ```
          az login --tenant <tenant_id>
          ```
  * **tfe**
      * Required Authorization:
          * Create Terraform Projects
          * Create Terraform Variable Sets
          * Create Terraform Variables
          * Publish Modules to the PMR
      * Login to HCP Terraform or Terraform Enterprise:
          ```
          terraform login [hostname]
          ```
  * **vault**
      * Required Authorization:
          * Create Vault Policy
          * Enable/Configure Auth Mount (jwt)
          * Enable/Configure Secrets Engine (azure)
          * Enable/Configure Secrets Engine (terraform)
          * Enable/Configure Secrets Engine (kv v2)
          * Write KV v2 Secrets
      * Configure Vault Address and Namespace as terraform variables
          * vault_addr
          * vault_namespace
      * Configure Environment Variable with a Vault Token
          ```
          export VAULT_TOKEN=<vault_token>
          ````

  ### Configure Terraform Variables

  Customize Terraform variables for the deployment environment. A sample [terraform.tfvars](./terraform.tfvars.sample) is provided

  ### Deployment Details

  This project deploys and configures the following:

  1. **Vault** | Create Policy authorizing request of platform credentials for project onboarding
  2. **Vault** | Enable KV v2 Secrets Engine (for storing static credentials)
  3. **Vault** | Write Static HCP Terraform token to KV secrets engine
  4. **Vault** | Write Static GitHub token to KV secrets engine
  5. **Vault** | Enable & Configure JWT Auth Mount (for authenticating HCP Terraform)
  6. **Vault** | Create JWT auth role to authenticate HCP Terraform project onboarding project
  7. **Azure** | Service Principal to configure Azure Secrets Engine
  8. **Azure** | Authorize Azure Secrets Engine Service Principal
      1. `Application.ReadWrite.All`
      2. `GroupMember.ReadWrite.All`
  9. **Azure** | Service Principal to support project onboarding
  10. **Azure** | Authorize Project Onboarding Service Principal
      1. `Application.ReadWrite.All`
      2. `AppRoleAssignment.ReadWrite.All`
      3. `Group.ReadWrite.All`
      4. `GroupMember.ReadWrite.All`
  11. **Vault** | Enable & Configure Azure Secrets Engine
  12. **Vault** | Azure Secrets Engine role for project onboarding
  13. **Terraform** | Create a Terraform project for Project Onboarding
  14. **Terraform** | Create a Terraform project for Production Workspaces
  15. **Terraform** | Create a Terraform project for Staging Workspaces
  16. **Terraform** | Create a Terraform project for Development Workspaces
  17. **Terraform** | Publish module: Project Onboarding with Azure Federated Identities
  18. **Terraform** | Enable No-Code module: Project Onboarding with Azure Federated Identities
  19. **Terraform** | Publish module: Project Onboarding using Vault-Backed credentials with persistent Service Principals
  20. **Terraform** | Enable No-Code module: Project Onboarding using Vault-Backed credentials with persistent Service Principals
  21. **Terraform** | Publish module: Project Onboarding using Vault-Backed credentials with dynamic Service Principals
  22. **Terraform** | Enable No-Code module: Project Onboarding using Vault-Backed credentials with dynamic Service Principals
  23. **Terraform** | Create Variable Set: HCP Terraform to Vault dynamic credentials configuration
      1) **Terraform** | Create Variables
          1. `TFC_VAULT_PROVIDER_AUTH`
          2. `TFC_VAULT_ADDR`
          3. `TFC_VAULT_NAMESPACE`
          4. `TFC_VAULT_AUTH_PATH`
  24. **Terraform** | Create Variable Set: HCP Terraform to Vault-backed Azure dynamic credentials configuration
      1. **Terraform** | Create Variables
          1. `TFC_VAULT_BACKED_AZURE_AUTH`
          2. `TFC_VAULT_BACKED_AZURE_MOUNT_PATH`
          3. `TFC_VAULT_BACKED_AZURE_SLEEP_SECONDS`
  25. **Terraform** | Create Variable Set: Project Onboarding Roles & Context
      1. **Terraform** | Create Variables
          1. `TFC_VAULT_RUN_ROLE`
          2. `TFC_VAULT_BACKED_AZURE_RUN_VAULT_ROLE`
          3. `prefix`

  ## Usage

  After initial deployment, the Terraform organization should be enabled with three No-Code modules:

  * azure-native-project
  * azure-vault-backed-static-project
  * azure-vault-backed-dynamic-project

  ![alt_text](./images/terraform-registry-no-code-modules.png "Terraform Registry | No-Code Module(s)")

  ### Usage Details

  1. Select the preferred No-Code module
  2. Select ‘Provision workspace’
  3. Provide a project name in the ‘project_name’ field
  4. Select ‘Next: Workspace settings’
  5. Provide a workspace name in the ‘Workspace name’ field
  6. Select the ‘azure-onboarding’ project under Project
  7. Select ‘Create workspace’
  
  {{ .Requirements }}

  {{ .Resources }}

  {{ .Inputs }}

  {{ .Outputs }}

output:
  file: README.md
  mode: replace 
  template: |-
      <!-- BEGIN_AUTOMATED_TF_DOCS_BLOCK -->
      {{ .Content }}
      <!-- END_AUTOMATED_TF_DOCS_BLOCK -->

output-values:
  enabled: false
  from: outputs.tf

sort:
  enabled: true
  by: required

settings:
  anchor: true
  color: true
  default: true
  description: true
  escape: true
  hide-empty: false
  html: true
  indent: 2
  lockfile: true
  read-comments: true
  required: true
  sensitive: true
  type: true
